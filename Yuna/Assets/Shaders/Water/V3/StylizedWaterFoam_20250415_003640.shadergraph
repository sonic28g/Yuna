
Shader "Shader Graphs/StylizedWaterFoam"
{
    Properties
    {
        _WaterColor("Water Color", Color) = (0, 0.5, 1, 0.6)
        _FoamColor("Foam Color", Color) = (1, 1, 1, 1)
        _FoamWidth("Foam Width", Float) = 0.1
        _FoamSmooth("Foam Smooth", Float) = 1.0
    }
    SubShader
    {
        Tags { "RenderType"="Transparent" "Queue"="Transparent" }
        LOD 100

        Pass
        {
            Name "ForwardLit"
            Tags { "LightMode" = "UniversalForward" }

            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

            struct Attributes
            {
                float4 positionOS : POSITION;
            };

            struct Varyings
            {
                float4 positionCS : SV_POSITION;
                float3 positionWS : TEXCOORD0;
                float4 screenPos : TEXCOORD1;
            };

            float4 _WaterColor;
            float4 _FoamColor;
            float _FoamWidth;
            float _FoamSmooth;

            Varyings vert(Attributes IN)
            {
                Varyings OUT;
                OUT.positionWS = TransformObjectToWorld(IN.positionOS.xyz);
                OUT.positionCS = TransformWorldToHClip(OUT.positionWS);
                OUT.screenPos = ComputeScreenPos(OUT.positionCS);
                return OUT;
            }

            half4 frag(Varyings IN) : SV_Target
            {
                float2 screenUV = IN.screenPos.xy / IN.screenPos.w;
                float sceneDepth = LinearEyeDepth(SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, screenUV));
                float3 viewPos = TransformWorldToView(IN.positionWS);
                float depthDiff = abs(sceneDepth - viewPos.z);
                float foamMask = smoothstep(0, _FoamWidth, depthDiff / _FoamSmooth);
                float4 finalColor = lerp(_WaterColor, _FoamColor, foamMask);
                return finalColor;
            }
            ENDHLSL
        }
    }
    FallBack "Hidden/Shader Graph/FallbackError"
}
